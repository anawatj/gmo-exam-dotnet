// <auto-generated />
using Implements;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220824134605_initialModel")]
    partial class initialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domains.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AnswerDesc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("AnswerScore")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionID");

                    b.ToTable("Answers", (string)null);
                });

            modelBuilder.Entity("Core.Domains.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("QuestionDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("Core.Domains.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("UserGroupID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserGroupID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Core.Domains.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserGroupName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("UserGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserGroupName = "Student LV1"
                        },
                        new
                        {
                            Id = 2,
                            UserGroupName = "Student LV2"
                        });
                });

            modelBuilder.Entity("Core.Domains.UserQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionID");

                    b.HasIndex("UserID");

                    b.ToTable("UserQuestions", (string)null);
                });

            modelBuilder.Entity("Core.Domains.UserQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AnswerID")
                        .HasColumnType("int");

                    b.Property<int>("UserQuestionID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnswerID");

                    b.HasIndex("UserQuestionID");

                    b.ToTable("UserQuestionAnswers", (string)null);
                });

            modelBuilder.Entity("Core.Domains.Answer", b =>
                {
                    b.HasOne("Core.Domains.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.Domains.User", b =>
                {
                    b.HasOne("Core.Domains.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("Core.Domains.UserQuestion", b =>
                {
                    b.HasOne("Core.Domains.Question", "Question")
                        .WithMany("UserQuestions")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.User", "User")
                        .WithMany("UserQuestions")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domains.UserQuestionAnswer", b =>
                {
                    b.HasOne("Core.Domains.Answer", "Answer")
                        .WithMany("UserQuestionAnswers")
                        .HasForeignKey("AnswerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserQuestion", "UserQuestion")
                        .WithMany("UserQuestionAnswers")
                        .HasForeignKey("UserQuestionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("UserQuestion");
                });

            modelBuilder.Entity("Core.Domains.Answer", b =>
                {
                    b.Navigation("UserQuestionAnswers");
                });

            modelBuilder.Entity("Core.Domains.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserQuestions");
                });

            modelBuilder.Entity("Core.Domains.User", b =>
                {
                    b.Navigation("UserQuestions");
                });

            modelBuilder.Entity("Core.Domains.UserGroup", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Domains.UserQuestion", b =>
                {
                    b.Navigation("UserQuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
